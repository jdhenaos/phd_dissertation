---
title: "Figure 1 - latent factor enrichment"
author: Juan Henao
date: '`r format(Sys.time(), "%d %B, %Y")`'
description: ""
title-block-banner: "black"
quarto:
  components:
    panel-tabset:
      max_items: 10
format: 
  html:
    embed-resources: true
    smooth-scroll: true
    anchor-sections: true
    number-sections: true
    toc: true
    toc-location: left
    code-fold: true
    theme: cerulean
editor: visual
---

# Basic information

```{r}
library(ggplot2)
library(MOFA2)
library(gprofiler2)
library(dplyr)

set_base_url("https://biit.cs.ut.ee/gprofiler_archive3/e104_eg51_p15")

input_folder <- "/home/rstudio/project/input_data/"
dic <- read.table(paste0(input_folder,"raw_data/230212_proteomics_dictionary.tsv"),sep = "\t",header = TRUE,row.names = 1)
MOFA.object <- readRDS(paste0(input_folder,"rds_data/MOFA.rds"))

factor.explain <- get_variance_explained(MOFA.object)$r2_per_factor$group1
bpd.table <- data.frame(factor = as.factor(rep(c("Factor 1",
                                                 "Factor 2",
                                                 "Factor 3",
                                                 "Factor 4",
                                                 "Factor 5",
                                                 "Factor 6",
                                                 "Factor 7"),5)),
                        value = as.vector(round(factor.explain,2)),
                        view = factor(c(rep("AM",7),
                                           rep("AC",7),
                                           rep("TG",7),
                                           rep("nTG",7),
                                           rep("PR",7)),levels = c("AM","AC","TG","nTG","PR")),
                        group = "")

p <- ggplot(bpd.table,
            aes_string(x="group", y="factor")) + 
  geom_tile(aes_string(fill="value"), color="black") +
  facet_wrap(as.formula(sprintf('~%s',setdiff(c("view", "factor","group"), c("group", "factor", NA)))), nrow=1) +
  labs(x="", y="", title="") + 
  scale_fill_gradientn(colors=c("#f7fcb9","#31a354"), guide="colorbar", limits=c(0,max(bpd.table$value)+0.01)) +
  guides(fill=guide_colorbar("Var. (%)")) +
  theme(
    axis.text.x = element_text(size=rel(1.0), color="black",angle = 45),
    axis.text.y = element_text(size=rel(1.1), color="black"),
    axis.line = element_blank(),
    axis.ticks =  element_blank(),
    panel.background = element_blank(),
    strip.background = element_blank(),
    strip.text = element_text(size=rel(1.0))
  ) + geom_text(aes(label = value), size = 2.5) + theme(text = element_text(size = 8))

ggsave(filename = "/home/rstudio/project/results/BPD/mofa/250704_factors_a.pdf",plot = p,
       width = 3,height = 1.50,units = "in",device = "pdf")

p
```

```{r}
q <- ggplot(bpd.table,
            aes_string(x="group", y="factor")) + 
  geom_tile(aes_string(fill="value"), color="black") +
  facet_wrap(as.formula(sprintf('~%s',setdiff(c("view", "factor","group"), c("group", "factor", NA)))), nrow=1) +
  labs(x="", y="", title="") + 
  scale_fill_gradientn(colors=c("#f7fcb9","#31a354"), guide="colorbar", limits=c(0,max(bpd.table$value)+0.01)) +
  guides(fill=guide_colorbar("Var. (%)")) + 
  labs(title = "MOFA - Latent factors",
       subtitle = "Variance explanation") +
  theme(
    legend.position = "none",
    axis.text.x = element_text(size=rel(1.0), color="black",angle = 45),
    axis.text.y = element_text(size=rel(1.1), color="black"),
    axis.line = element_blank(),
    axis.ticks =  element_blank(),
    panel.background = element_blank(),
    strip.background = element_blank(),
    strip.text = element_text(size=rel(1.0))
  ) + geom_text(aes(label = value), size = 2.5) + theme(text = element_text(size = 8), plot.title = element_text(size=8))

ggsave(filename = "/home/rstudio/project/results/BPD/mofa/250704_factors_b.pdf",plot = q,
       width = 3,height = 2.25,units = "in",device = "pdf")

q
```

# Enrichment analysis

```{r}

FCplotter = function(pathways, weights, dic, to.map, n.paths){
  
  to.change <- dic[which(dic$original %in% to.map),]
  to.change <- to.change[match(to.map,to.change$original),]
  
  names(weights) <- to.change$entrez
  
  # data is the dataframe containing only significant genes for a specific cell type
  # pathway is a df of pathway ids/go ids that are statistically enriched from geneprofile
  to.plot <- data.frame()
  for(i in 1:nrow(pathways)){
    res = gost(query = pathways[i,"term_id"], organism = "hsapiens")
    gene_set = res$meta$genes_metadata$query$query_1$ensgs
    gene_set <- gconvert(query = gene_set,organism = "hsapiens",target = "ENTREZGENE_ACC")$target
    
    to.plot <- rbind(to.plot,
                     data.frame(
                       Name=pathways[i,"term_name"],
                       weights=weights[names(weights) %in% gene_set],
                       Set_size = length(weights[names(weights) %in% gene_set]))
                     )
  }
  
  if(any(is.nan(to.plot$weights))){stop("anormal expression detected")}
  
  best <- data.frame()
  for(p in unique(to.plot$Name)){
    best <- rbind(best,data.frame(Name = p, mean = mean(to.plot$weights[which(to.plot$Name == p)])))
  }
  
  pos <- sum(as.numeric(best$mean > 0))
  
  if(pos > 0 & pos < n.paths){
    best <- best[order(best$mean,decreasing = TRUE),]
    collector <- best[seq(pos),]
    
    best <- best[which(!best$Name %in% unique(collector$Name)),]
    best <- best[order(best$mean),]
    
    collector <- rbind(collector,best[seq(n.paths - pos),])
  } else if(pos > 0 & pos >= n.paths){
    best <- best[order(best$mean,decreasing = TRUE),]
    collector <- best[seq(n.paths),]
  }else if(pos == 0){
    best <- best[order(best$mean),]
    collector <- best[seq(n.paths),]
  }else{
    stop("Internal error: incorrect pathway extraction")
  }
  
  to.plot <- to.plot[which(to.plot$Name %in% collector$Name),]
  
  return(to.plot)
}

loc_val <- function(mean_FC){
  result <- c()
  for(i in mean_FC){
    if(i < 0){
      result <- c(result,(i-0.04))
    }
    if(i > 0){
      result <- c(result,(i+0.04))
    }
    if(i == 0){
      result <- c(result,NA)
    }
  }
  
  return(result)
}

feature.extractor <- function(view,factor,n.features,type){
  if(view == "proteomics"){
    weights <- get_weights(MOFA.object,abs = F)$proteomics
  }else if(view == "metabolomics"){
    weights <- get_weights(MOFA.object,abs = F)$metabolomics
  }
  
  weights <- weights[order(abs(weights[,factor]),decreasing = TRUE),]
  weights <- weights[seq(n.features),factor]
  
  if(type == "positive"){
    weights <- weights[weights > 0]
  }else if(type == "negative"){
    weights <- weights[weights < 0]
  }
  
  return(weights)
}

enricher <- function(entrez.list){
  proteomics.gost <- gost(unique(sort(entrez.list)),organism = "hsapiens",sources=c("GO:MF", "GO:BP","GO:CC", "REAC"),user_threshold = 0.05)
  proteomics.reactome <- proteomics.gost$result[proteomics.gost$result$source == "REAC",c("term_id", "source", "term_name", "p_value", "query_size", "term_size", "intersection_size","recall")]
  
  return(proteomics.reactome)
}
```

## Factor 4

```{r}
w.f4 <- feature.extractor(view = "proteomics",factor = 4,n.features = 497,type="all")
cat("Number of explanatory proteins for Factor 4 \n", length(w.f4))

or.f4 <- toupper(names(w.f4))
or.f4 <- gsub(pattern = "[[:punct:]]| ",replacement = ".",x = or.f4)

ez.f4 <- dic$entrez[which(dic$original %in% or.f4)]

sig.react.f4 <- enricher(entrez.list = ez.f4)

cat("Number of unique pathways for Factor 4 \n", dim(sig.react.f4))
rmarkdown::paged_table(sig.react.f4)
```

## Factor 5

```{r}
w.f5 <- feature.extractor(view = "proteomics",factor = 5,n.features = 103,type="all")
cat("Number of explanatory proteins for Factor 5 \n", length(w.f5))

or.f5 <- toupper(names(w.f5))
or.f5 <- gsub(pattern = "[[:punct:]]| ",replacement = ".",x = or.f5)

ez.f5 <- dic$entrez[which(dic$original %in% or.f5)]

sig.react.f5 <- enricher(entrez.list = ez.f5)

cat("Number of unique pathways for Factor 5 \n", dim(sig.react.f5))
rmarkdown::paged_table(sig.react.f5)
```

## Factor 6

```{r}
w.f6 <- feature.extractor(view = "proteomics",factor = 6,n.features = 158,type="all")
cat("Number of explanatory proteins for Factor 6 \n", length(w.f6))

or.f6 <- toupper(names(w.f6))
or.f6 <- gsub(pattern = "[[:punct:]]| ",replacement = ".",x = or.f6)

ez.f6 <- dic$entrez[which(dic$original %in% or.f6)]

sig.react.f6 <- enricher(entrez.list = ez.f6)

cat("Number of pathways for Factor 6 \n", dim(sig.react.f6))
rmarkdown::paged_table(sig.react.f6)
```

## Unique pathways

```{r}
uni.f4 <-  sig.react.f4[which(!sig.react.f4$term_name %in% sig.react.f6$term_name & !sig.react.f4$term_name %in% sig.react.f5$term_name),]
rmarkdown::paged_table(uni.f4)

fc.f4 <- FCplotter(pathways = uni.f4[1:5,],weights = w.f4,dic=dic,to.map=or.f4,n.paths=5)

to.plot <- rbind(fc.f4)

to.plot$Name <-  factor(to.plot$Name, levels=unique(to.plot$Name))

swr <- function(string, nwrap=20) {
  paste(strwrap(string, width=nwrap), collapse="\n")
}
swr <- Vectorize(swr)

to.plot$Name <- swr(to.plot$Name)

to.plot$Cell <- c(
  rep("Factor 4",length(fc.f4$weights)))

to.plot$Cell <- factor(to.plot$Cell,levels = c("Factor 4"))
to.plot$Name <- factor(to.plot$Name,levels = unique(to.plot$Name))

to.plot4 <- distinct(to.plot,Name,Set_size,Cell)

p <- ggplot(to.plot, aes(x = weights, y = Name, fill = Cell)) + ylab("Pathways") + xlab("Factor weights") +
  geom_boxplot(outlier.shape = NA) + facet_grid(cols = dplyr::vars(Cell),space = "free_x", scales = "free_x") + 
  theme_bw() + theme(axis.line = element_blank(),
                     panel.grid.major = element_blank(),
                     panel.grid.minor = element_blank(),
                     panel.background = element_blank(),
                     text = element_text(size=6)) +
  geom_jitter(color="black", size=0.5) + theme(legend.position = "none", axis.text.x = element_text(size=6),
                                               legend.direction = "vertical") + theme(strip.background =element_rect(fill="#5595C6")) +
  geom_text(data = to.plot4, aes(label = Set_size, x =  max(to.plot$weights) + 0.1, y = levels(to.plot$Name) ),size = 2) + 
  scale_fill_manual(values = c("#1b9e77"),aesthetics = "fill")

ggsave(filename = "/home/rstudio/project/results/BPD/mofa/250704_uni_factor4.pdf",plot = p,
       width = 2.75,height = 2.50,units = "in",device = "pdf")

uni.f4$p_value <- formatC(uni.f4$p_value,format = "e", digits = 2)
uni.f4$recall <- formatC(uni.f4$recall,format = "e", digits = 2)

p
#######

uni.f5 <-  sig.react.f5[which(!sig.react.f5$term_name %in% sig.react.f6$term_name & !sig.react.f5$term_name %in% sig.react.f4$term_name),]
rmarkdown::paged_table(uni.f5)

fc.f5 <- FCplotter(pathways = uni.f5,weights = w.f5,dic=dic,to.map=or.f5,n.paths=5)

to.plot <- rbind(fc.f5)

to.plot$Name <-  factor(to.plot$Name, levels=unique(to.plot$Name))

swr <- function(string, nwrap=20) {
  paste(strwrap(string, width=nwrap), collapse="\n")
}
swr <- Vectorize(swr)

to.plot$Name <- swr(to.plot$Name)

to.plot$Cell <- c(
  rep("Factor 5",length(fc.f5$weights)))

to.plot$Cell <- factor(to.plot$Cell,levels = c("Factor 5"))
to.plot$Name <- factor(to.plot$Name,levels = unique(to.plot$Name))

to.plot5 <- distinct(to.plot,Name,Set_size,Cell)

p <- ggplot(to.plot, aes(x = weights, y = Name, fill = Cell)) + ylab("Pathways") + xlab("Factor weights") +
  geom_boxplot(outlier.shape = NA) + facet_grid(cols = dplyr::vars(Cell),space = "free_x", scales = "free_x") + 
  theme_bw() + theme(axis.line = element_blank(),
                     panel.grid.major = element_blank(),
                     panel.grid.minor = element_blank(),
                     panel.background = element_blank(),
                     text = element_text(size=6)) +
  geom_jitter(color="black", size=0.5) + theme(legend.position = "none", axis.text.x = element_text(size=6),
                                               legend.direction = "vertical") + theme(strip.background =element_rect(fill="#5595C6")) +
  geom_text(data = to.plot5, aes(label = Set_size, x =  max(to.plot$weights) + 0.1, y = levels(to.plot$Name) ),size = 2) + 
  scale_fill_manual(values = c("#d95f02"),aesthetics = "fill")

ggsave(filename = "/home/rstudio/project/results/BPD/mofa/250704_uni_factor5.pdf",plot = p,
       width = 2.75,height = 2.50,units = "in",device = "pdf")

uni.f5$p_value <- formatC(uni.f5$p_value,format = "e", digits = 2)
uni.f5$recall <- formatC(uni.f5$recall,format = "e", digits = 2)

p
######

uni.f6 <-  sig.react.f6[which(!sig.react.f6$term_name %in% sig.react.f4$term_name & !sig.react.f6$term_name %in% sig.react.f5$term_name),]
rmarkdown::paged_table(uni.f6)

fc.f6 <- FCplotter(pathways = uni.f6[1:5,],weights = w.f6,dic=dic,to.map=or.f6,n.paths=5)

to.plot <- rbind(fc.f6)

to.plot$Name <-  factor(to.plot$Name, levels=unique(to.plot$Name))

swr <- function(string, nwrap=20) {
  paste(strwrap(string, width=nwrap), collapse="\n")
}
swr <- Vectorize(swr)

to.plot$Name <- swr(to.plot$Name)

to.plot$Cell <- c(
  rep("Factor 6",length(fc.f6$weights)))

to.plot$Cell <- factor(to.plot$Cell,levels = c("Factor 6"))
to.plot$Name <- factor(to.plot$Name,levels = unique(to.plot$Name))

to.plot6 <- distinct(to.plot,Name,Set_size,Cell)

p <- ggplot(to.plot, aes(x = weights, y = Name, fill = Cell)) + ylab("Pathways") + xlab("Factor weights") +
  geom_boxplot(outlier.shape = NA) + facet_grid(cols = dplyr::vars(Cell),space = "free_x", scales = "free_x") + 
  theme_bw() + theme(axis.line = element_blank(),
                     panel.grid.major = element_blank(),
                     panel.grid.minor = element_blank(),
                     panel.background = element_blank(),
                     text = element_text(size=6)) +
  geom_jitter(color="black", size=0.5) + theme(legend.position = "none", axis.text.x = element_text(size=6),
                                               legend.direction = "vertical") + theme(strip.background =element_rect(fill="#5595C6")) +
  geom_text(data = to.plot6, aes(label = Set_size, x =  max(to.plot$weights) + 0.1, y = levels(to.plot$Name) ),size = 2) + 
  scale_fill_manual(values = c("#7570b3"),aesthetics = "fill") 

ggsave(filename = "/home/rstudio/project/results/BPD/mofa/250704_uni_factor6.pdf",plot = p,
       width = 2.75,height = 2.50,units = "in",device = "pdf")

uni.f6$p_value <- formatC(uni.f6$p_value,format = "e", digits = 2)
uni.f6$recall <- formatC(uni.f6$recall,format = "e", digits = 2)

p

```

## Shared pathways

```{r}
shared.paths <-  sig.react.f6[which(sig.react.f6$term_name %in% sig.react.f4$term_name & sig.react.f6$term_name %in% sig.react.f5$term_name),]
shared.paths$p_value <- formatC(shared.paths$p_value,format = "e", digits = 2)
shared.paths$recall <- formatC(shared.paths$recall,format = "e", digits = 2)
rmarkdown::paged_table(shared.paths)

uni.f4 <- sig.react.f4[which(sig.react.f4$term_name %in% sig.react.f6$term_name & sig.react.f4$term_name %in% sig.react.f5$term_name),]
fc.f4 <- FCplotter(pathways = uni.f4,weights = w.f4,dic=dic,to.map=or.f4,n.paths=5)

to.plot <- rbind(fc.f4)

to.plot$Name <-  factor(to.plot$Name, levels=unique(to.plot$Name))

swr <- function(string, nwrap=20) {
  paste(strwrap(string, width=nwrap), collapse="\n")
}
swr <- Vectorize(swr)

to.plot$Name <- swr(to.plot$Name)

to.plot$Cell <- c(
  rep("Factor 4",length(fc.f4$weights)))

to.plot$Cell <- factor(to.plot$Cell,levels = c("Factor 4"))
#to.plot$Name <- factor(to.plot$Name,levels = unique(to.plot$Name))
to.plot$Name <- factor(to.plot$Name)

to.plot4 <- distinct(to.plot,Name,Set_size,Cell)

p <- ggplot(to.plot, aes(x = weights, y = Name, fill = Cell)) + ylab("Pathways") + xlab("Factor weights") +
  geom_boxplot(outlier.shape = NA) + facet_grid(cols = dplyr::vars(Cell),space = "free_x", scales = "free_x") + 
  theme_bw() + theme(axis.line = element_blank(),
                     panel.grid.major = element_blank(),
                     panel.grid.minor = element_blank(),
                     panel.background = element_blank(),
                     text = element_text(size=6)) +
  geom_jitter(color="black", size=0.5) + theme(legend.position = "none", axis.text.x = element_text(size=6),
                                               legend.direction = "vertical") + theme(strip.background =element_rect(fill="#5595C6")) +
  geom_text(data = to.plot4, aes(label = Set_size, x =  max(to.plot$weights) + 0.1, y = levels(to.plot$Name) ),size = 2) + 
  scale_fill_manual(values = c("#1b9e77"),aesthetics = "fill")

ggsave(filename = "/home/rstudio/project/results/BPD/mofa/250704_common_factor4.pdf",plot = p,
       width = 2.75,height = 2.50,units = "in",device = "pdf")

p
#########################################

uni.f5 <- sig.react.f5[which(sig.react.f5$term_name %in% sig.react.f4$term_name & sig.react.f5$term_name %in% sig.react.f6$term_name),]
fc.f5 <- FCplotter(pathways = uni.f5,weights = w.f5,dic=dic,to.map=or.f5,n.paths=5)

to.plot <- rbind(fc.f5)

to.plot$Name <-  factor(to.plot$Name, levels=unique(to.plot$Name))

swr <- function(string, nwrap=20) {
  paste(strwrap(string, width=nwrap), collapse="\n")
}
swr <- Vectorize(swr)

to.plot$Name <- swr(to.plot$Name)

to.plot$Cell <- c(
  rep("Factor 5",length(fc.f5$weights)))

to.plot$Cell <- factor(to.plot$Cell,levels = c("Factor 5"))
#to.plot$Name <- factor(to.plot$Name,levels = unique(to.plot$Name))
to.plot$Name <- factor(to.plot$Name)

to.plot5 <- distinct(to.plot,Name,Set_size,Cell)

p <- ggplot(to.plot, aes(x = weights, y = Name, fill = Cell)) + ylab("Pathways") + xlab("Factor weights") +
  geom_boxplot(outlier.shape = NA) + facet_grid(cols = dplyr::vars(Cell),space = "free_x", scales = "free_x") + 
  theme_bw() + theme(axis.line = element_blank(),
                     panel.grid.major = element_blank(),
                     panel.grid.minor = element_blank(),
                     panel.background = element_blank(),
                     text = element_text(size=6)) +
  geom_jitter(color="black", size=0.5) + theme(legend.position = "none", axis.text.x = element_text(size=6),
                                               legend.direction = "vertical") + theme(strip.background =element_rect(fill="#5595C6")) +
  geom_text(data = to.plot5, aes(label = Set_size, x =  max(to.plot$weights) + 0.1, y = levels(to.plot$Name) ),size = 2) + 
  scale_fill_manual(values = c("#d95f02"),aesthetics = "fill") 

ggsave(filename = "/home/rstudio/project/results/BPD/mofa/250704_common_factor5.pdf",plot = p,
       width = 2.75,height = 2.50,units = "in",device = "pdf")

p
##############################

uni.f6 <- sig.react.f6[which(sig.react.f6$term_name %in% sig.react.f4$term_name & sig.react.f6$term_name %in% sig.react.f5$term_name),]
fc.f6 <- FCplotter(pathways = uni.f6,weights = w.f6,dic=dic,to.map=or.f6,n.paths=5)

to.plot <- rbind(fc.f6)

to.plot$Name <-  factor(to.plot$Name, levels=unique(to.plot$Name))

swr <- function(string, nwrap=20) {
  paste(strwrap(string, width=nwrap), collapse="\n")
}
swr <- Vectorize(swr)

to.plot$Name <- swr(to.plot$Name)

to.plot$Cell <- c(
  rep("Factor 6",length(fc.f6$weights)))

to.plot$Cell <- factor(to.plot$Cell,levels = c("Factor 6"))
#to.plot$Name <- factor(to.plot$Name,levels = unique(to.plot$Name))
to.plot$Name <- factor(to.plot$Name)

to.plot6 <- distinct(to.plot,Name,Set_size,Cell)

p <- ggplot(to.plot, aes(x = weights, y = Name, fill = Cell)) + ylab("Pathways") + xlab("Factor weights") +
  geom_boxplot(outlier.shape = NA) + facet_grid(cols = dplyr::vars(Cell),space = "free_x", scales = "free_x") + 
  theme_bw() + theme(axis.line = element_blank(),
                     panel.grid.major = element_blank(),
                     panel.grid.minor = element_blank(),
                     panel.background = element_blank(),
                     text = element_text(size=6)) +
  geom_jitter(color="black", size=0.5) + theme(legend.position = "none", axis.text.x = element_text(size=6),
                                               legend.direction = "vertical") + theme(strip.background =element_rect(fill="#5595C6")) +
  geom_text(data = to.plot6, aes(label = Set_size, x =  max(to.plot$weights) + 0.1, y = levels(to.plot$Name) ),size = 2) + 
  scale_fill_manual(values = c("#7570b3"),aesthetics = "fill") 

ggsave(filename = "/home/rstudio/project/results/BPD/mofa/250704_common_factor6.pdf",plot = p,
       width = 2.75,height = 2.50,units = "in",device = "pdf")

p
```

# Session info

```{r}
sessionInfo()
```
